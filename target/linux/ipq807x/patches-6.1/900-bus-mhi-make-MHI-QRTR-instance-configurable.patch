From d534c73ca129290b876c7eaea5e4281f5d9161ec Mon Sep 17 00:00:00 2001
From: Robert Marko <robimarko@gmail.com>
Date: Mon, 10 Oct 2022 13:58:57 +0200
Subject: [PATCH] bus: mhi: make MHI QRTR instance configurable

Allow QRTR instance ID to be configurable for MHI devices by parsing
"qcom,qrtr_instance_id" from DTS and then writing it to the MHI device.

It is required as otherwise having AHB ath11k device and PCI one will
cause a clash and you are not able to concurrently use them.

Signed-off-by: Robert Marko <robimarko@gmail.com>
---
 drivers/bus/mhi/host/boot.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/drivers/bus/mhi/host/boot.c b/drivers/bus/mhi/host/boot.c
index 26d0eddb1477..bff5a0200966 100644
--- a/drivers/bus/mhi/host/boot.c
+++ b/drivers/bus/mhi/host/boot.c
@@ -16,8 +16,11 @@
 #include <linux/random.h>
 #include <linux/slab.h>
 #include <linux/wait.h>
+#include <linux/of.h>
 #include "internal.h"
 
+#define QRTR_INSTANCE_MASK	0x0000FFFF
+
 /* Setup RDDM vector table for RDDM transfer and program RXVEC */
 int mhi_rddm_prepare(struct mhi_controller *mhi_cntrl,
 		     struct image_info *img_info)
@@ -398,6 +401,7 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 	dma_addr_t dma_addr;
 	size_t size;
 	int i, ret;
+	u32 instance;
 
 	if (MHI_PM_IN_ERROR_STATE(mhi_cntrl->pm_state)) {
 		dev_err(dev, "Device MHI is not in valid state\n");
@@ -470,6 +474,24 @@ void mhi_fw_load_handler(struct mhi_controller *mhi_cntrl)
 		goto fw_load_ready_state;
 	}
 
+	/* QRTR ID for multiple cards */
+	if (!ret && mhi_cntrl->cntrl_dev->of_node) {
+		ret = of_property_read_u32(mhi_cntrl->cntrl_dev->of_node,
+					   "qcom,qrtr_instance_id", &instance);
+		if (!ret) {
+			instance &= QRTR_INSTANCE_MASK;
+			ret = mhi_write_reg_field(mhi_cntrl, mhi_cntrl->bhi,
+						  BHI_ERRDBG2, QRTR_INSTANCE_MASK,
+						  instance);
+			if (ret)
+				dev_err(dev, "Failed to write QRTR instance ID: %d\n", ret);
+		} else {
+			dev_err(dev,
+				"qcom,qrtr_instance_id not defined in DT, ret:%d\n",
+				ret);
+		}
+	}
+
 	write_lock_irq(&mhi_cntrl->pm_lock);
 	mhi_cntrl->dev_state = MHI_STATE_RESET;
 	write_unlock_irq(&mhi_cntrl->pm_lock);
-- 
2.37.3

